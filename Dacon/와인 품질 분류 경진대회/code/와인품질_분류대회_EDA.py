# -*- coding: utf-8 -*-
"""와인품질 분류대회 EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c_OguI3J0sQexpqY9DJjaXJk4pqWpVuh
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os
from matplotlib import patches
# %matplotlib inline

os.getcwd()

train = pd.read_csv('train.csv')
train.head()

"""#와인 품질 분류대회 EDA"""

def check_missing_col(dataframe):
    counted_missing_col = 0
    for i, col in enumerate(dataframe.columns):
        missing_values = sum(dataframe[col].isna())
        is_missing = True if missing_values >= 1 else False
        if is_missing:
            counted_missing_col += 1
            print(f'결측치가 있는 컬럼은: {col}입니다')
            print(f'총 {missing_values}개의 결측치가 존재합니다.')

        if i == len(dataframe.columns) - 1 and counted_missing_col == 0:
            print('결측치가 존재하지 않습니다')

check_missing_col(train)

counted_values = train['quality'].value_counts()
plt.style.use('ggplot')
plt.figure(figsize=(12, 10))
plt.title('class counting', fontsize = 30)
value_bar_ax = sns.barplot(x=counted_values.index, y=counted_values)
value_bar_ax.tick_params(labelsize=20)

qualities = {}

for i in range(4, 9):
    quality_description = train[train['quality'] == i].drop(['id', 'quality'], axis=1).describe()
    if i == 4:
        means = pd.DataFrame({i: quality_description.loc['mean']})
    else:
        mean = pd.DataFrame({i: quality_description.loc['mean']})
        means = pd.concat([means, mean], axis=1)
        
means = means.T

fig, axes = plt.subplots(4, 3, figsize=(25, 15))

fig.suptitle('mean values per quality', fontsize= 40)
for ax, col in zip(axes.flat, means.columns):
    ax.plot([4,5,6,7,8], means[col])
    ax.scatter([4,5,6,7,8], means[col])
    ax.set_title(col, fontsize=20)
plt.setp(axes, xticks=[4, 5, 6, 7, 8])
plt.tight_layout()
plt.show()

fig, axes = plt.subplots(4, 3, figsize=(25, 15))

fig.suptitle('feature distributions per quality', fontsize= 40)
for ax, col in zip(axes.flat, train.columns[1:]):
    sns.violinplot(x= 'quality', y= col, ax=ax, data=train)
    ax.set_title(col, fontsize=20)
plt.tight_layout()
plt.show()

sns.color_palette("Set2")
fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize = (30, 9))


scatter_fix = sns.histplot(data=train, x='pH', y='fixed acidity', bins=50, ax= ax1)
scatter_volatile =  sns.histplot(data=train, x='pH', y='volatile acidity', bins=50, ax= ax2, hue='quality')
scatter_citric = sns.histplot(data=train, x='pH', y='citric acid', bins=50, ax=ax3, hue='quality')
scatter_fix.set_xlabel('pH', fontsize=20)

ax1.settitle()
fig.suptitle('pH & acid hist plot', fontsize = 40)

plt.show()

